<!DOCTYPE html>
<html>
<head>
    <title>Service Status Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            margin: 20px;
        }

        h1 {
            text-align: center;
            color: #343a40;
        }

        #search-box {
            display: block;
            margin: 0 auto 20px auto;
            padding: 8px;
            width: 300px;
            font-size: 16px;
            border: 1px solid #ced4da;
            border-radius: 4px;
        }

        #refresh-btn {
            display: block;
            margin: 0 auto 20px auto;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #refresh-btn:hover {
            background-color: #0056b3;
        }

        .server-box {
            background-color: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 10px;
            padding: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .server {
            font-weight: bold;
            font-size: 18px;
            cursor: pointer;
            color: #343a40;
            user-select: none;
        }

        .service-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            display: none;
        }

        .service-table th, .service-table td {
            border: 1px solid #dee2e6;
            padding: 8px 12px;
            text-align: left;
        }

        .service-table th {
            background-color: #e9ecef;
        }

        .status-tag {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            color: white;
            display: inline-block;
            min-width: 70px;
            text-align: center;
        }

        .running {
            background-color: #28a745;
        }

        .stopped {
            background-color: #dc3545;
        }

        .error {
            background-color: #ffc107;
            color: #212529;
        }
    </style>
</head>
<body>
    <h1>Service Status Dashboard</h1>
    <input type="text" id="search-box" placeholder="Search server or service..." oninput="applyFilter()">
    <button id="refresh-btn" onclick="fetchStatus()">Refresh</button>
    <div id="status-container"></div>

    <script>
        let rawData = [];

        async function fetchStatus() {
            const container = document.getElementById('status-container');
            container.innerHTML = 'Loading...';

            try {
                const response = await fetch('/status');
                const data = await response.json();

                if (!Array.isArray(data)) {
                    container.innerHTML = `<p style="color: red;">Error: Invalid data format received.</p>`;
                    console.warn('Received non-array data:', data);
                    return;
                }

                rawData = data;
                renderStatus(data);
            } catch (err) {
                container.innerHTML = `<p style="color: red;">Error fetching status data.</p>`;
                console.error('Fetch error:', err);
            }
        }

        function renderStatus(data) {
            const container = document.getElementById('status-container');
            container.innerHTML = '';

            const serverMap = {};
            data.forEach(item => {
                if (!serverMap[item.server]) {
                    serverMap[item.server] = [];
                }
                serverMap[item.server].push(item);
            });

            Object.keys(serverMap).forEach(server => {
                const serverBox = document.createElement('div');
                serverBox.className = 'server-box';

                // Server header with expand/collapse
                const serverDiv = document.createElement('div');
                serverDiv.className = 'server';
                serverDiv.textContent = `+ ${server}`;
                serverDiv.onclick = function() {
                    const table = this.nextElementSibling;
                    if (table.style.display === 'none') {
                        table.style.display = 'table';
                        this.textContent = `âˆ’ ${server}`;
                    } else {
                        table.style.display = 'none';
                        this.textContent = `+ ${server}`;
                    }
                };
                serverBox.appendChild(serverDiv);

                // Service status table
                const table = document.createElement('table');
                table.className = 'service-table';
                table.style.display = 'none';

                // Table header
                const thead = document.createElement('thead');
                thead.innerHTML = `
                    <tr>
                        <th>Service Name</th>
                        <th>Status</th>
                    </tr>
                `;
                table.appendChild(thead);

                // Table body with services
                const tbody = document.createElement('tbody');
                serverMap[server].forEach(item => {
                    const tr = document.createElement('tr');

                    const serviceTd = document.createElement('td');
                    serviceTd.textContent = item.service || '[Unknown]';

                    const statusTd = document.createElement('td');
                    const statusSpan = document.createElement('span');

                    const status = item.status ? item.status.toLowerCase() : '';
                    let statusClass = 'error';

                    if (status.includes('running')) {
                        statusClass = 'running';
                    } else if (status.includes('stopped')) {
                        statusClass = 'stopped';
                    }

                    statusSpan.className = `status-tag ${statusClass}`;
                    statusSpan.textContent = item.status || 'Unknown';

                    statusTd.appendChild(statusSpan);

                    tr.appendChild(serviceTd);
                    tr.appendChild(statusTd);

                    tbody.appendChild(tr);
                });
                table.appendChild(tbody);

                serverBox.appendChild(table);
                container.appendChild(serverBox);
            });
        }

        function applyFilter() {
            const query = document.getElementById('search-box').value.trim().toLowerCase();
            const filtered = rawData.filter(item =>
                (item.server && item.server.toLowerCase().includes(query)) ||
                (item.service && item.service.toLowerCase().includes(query))
            );
            renderStatus(filtered);
        }

        // Initial load
        fetchStatus();
    </script>
</body>
</html>
